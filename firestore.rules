rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwnerOnCreate() {
      return isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
    }

    function isOwnerOnWrite() {
      return isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    // Keep validation simple in rules; detailed checks are enforced server-side
    function validListData(d) {
      return d.entries is list && d.entries.size() > 0 && d.entries.size() <= 10;
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Restaurants are public (writes via server only)
    match /restaurants/{restaurantId} {
      allow read: if true;
      allow write: if false; // writes go through admin API which bypasses rules
    }

    // Users can only manage their own profile
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Lists: public read; only owners can create/update/delete; validate payload
    match /lists/{listId} {
      allow read: if true;
      allow create: if isOwnerOnCreate() && validListData(request.resource.data);
      allow update: if isOwnerOnWrite() && validListData(request.resource.data);
      allow delete: if isOwnerOnWrite();
    }

    // Restaurant likes: users can like/unlike under their own UID
    match /restaurants/{restaurantId}/likes/{userId} {
      allow read: if true; // or restrict as needed
      allow create, delete: if request.auth != null && request.auth.uid == userId;
      allow update: if false; // no direct updates
    }

    // Rules for collections
    match /collections/{collectionId} {
      // Public collections are readable by anyone
      allow read: if resource.data.isPublic == true;
      
      // Logged-in users can read their own private collections
      allow read: if request.auth != null && resource.data.ownerId == request.auth.uid;

      // Logged-in users can create collections
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;

      // Only the owner can update or delete a collection
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;

      // Rules for followers subcollection
      match /followers/{userId} {
        // Logged-in users can follow/unfollow a public collection
        allow create, delete: if request.auth != null && request.auth.uid == userId && get(/databases/$(database)/documents/collections/$(collectionId)).data.isPublic == true;
        
        // Followers of a public collection are readable by anyone
        allow read: if get(/databases/$(database)/documents/collections/$(collectionId)).data.isPublic == true;
      }
    }
  }
}